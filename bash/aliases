#!/bin/bash

alias ..='cd ..'
alias b='bundle exec'
# We want to clean all of our gems sometimes, but not every time.
# This will clean gems 10% of the time.
# Game theory.
alias bi='bundle install && ( ( [ $RANDOM -gt 29490 ] && [ `rvm-prompt g` ] && bundle clean --force ); true )'
alias bm='[[ :$PATH: != *:"$PWD/bin":* ]] && export PATH=$PWD/bin:$PATH'
alias bo='bundle open'
alias c='cap'
alias df='df -kTh'
alias du='du -kh'
alias e='emacsclient --tty -a ""'
alias eg='emacsclient --no-wait -a ""'
alias f='git flow feature'
alias fig='LEIN_FAST_TRAMPOLINE=y rlwrap lein trampoline figwheel'
alias filecount='find . | cut -d/ -f2 | sort | uniq -c | sort -bn'
alias frequency='history | awk '"'"'{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}'"'"' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10'
alias gco='git checkout $(git branch -a | cut -c 3- | sed '"'"'s/^remotes\/[^/]*\///'"'"' | sort | uniq | grep -v HEAD | fzf-tmux -d 20)'
alias gg='git l $(current_tracking_branch)^...'
alias gl='git smart-log'
alias glx='git log --graph --all --decorate --pretty=format:"%C(magenta)%h %C(blue)%ai %C(green)%an %C(cyan)%s %C(yellow bold)%d"'
alias glxx='git log --graph --all --decorate'
alias gm='git smart-merge'
alias gru="git remote show | sed '/heroku/d' | xargs -I {} git remote update {} --prune; git submodule update"
alias gs="git status"
alias gup='git smart-pull'
alias hglog='hg sglog | less -R'
alias l='ls -lrthG'
alias ll='ls -Al'
alias ls='ls -G'
alias mig='rk db:migrate db:test:prepare'
alias mkdir='mkdir -p'
alias mqc='(cd $(git rev-parse --show-toplevel); git commit --no-edit; script/mergeq --continue)'
alias mqe='(cd $(git rev-parse --show-toplevel); script/mergeq edge)'
alias mqm='(cd $(git rev-parse --show-toplevel); script/mergeq master)'
alias mqp='(cd $(git rev-parse --show-toplevel); script/mergeq production)'
alias nrepl='LEIN_FAST_TRAMPOLINE=y lein trampoline repl'
alias ope='bin/open_last_error'
alias opr='bin/open_pull_request'
alias pbgist='gist -p -P | pbcopy'
alias r='`[ -e bin/r ] && echo bin/r || [ -e bin/rails ] && echo bin/rails || echo rails`'
alias release='git flow release'
alias ss='spring stop'
alias ssh='TERM=xterm-256color ssh'
alias start_pow="launchctl load $HOME/Library/LaunchAgents/cx.pow.powd.plist"
alias stop_pow="launchctl unload $HOME/Library/LaunchAgents/cx.pow.powd.plist"
alias tmux2="tmux -2 attach"
alias which='type -a'
alias z='`[ -e .zeus.sock ] && echo zeus || echo SAD: Zeus is not running 1>&2`'
alias zb='`[ -e .zeus.sock ] && echo zeus || echo bundle exec`'
alias zk='ps aux | grep zeus | grep -v grep | awk '"'"'{print $2}'"'"' | xargs kill -9'
alias zs='(bundle check > /dev/null || bi); zk; rm .zeus.sock; reset; zeus start'

function zeus {
  command zeus $@
  ZE_EC=$?
  stty sane
  if [ $ZE_EC = 2 ]; then
    zeus $@
  fi
}

function rk {
  if [ -e bin/rake ]; then
    bin/rake "$@"
  else
    zb rake "$@"
  fi
}

unalias g 2>/dev/null
function g {
  if [[ $# > 0 ]]; then
    hub "$@"
  else
    git status -sb
  fi
}

if [[ -x complete ]]; then
  complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null || complete -o default -o nospace -F _git g
fi

function current_branch {
  branch_name="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)" ||
  branch_name="(unnamed branch)"     # detached HEAD

  echo $branch_name
}

function current_tracking_branch {
  branch_name="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD@{u} 2>/dev/null)" ||
  branch_name=""

  echo $branch_name
}

# Pause guard while checking out. Add below alias to .gitconfig:
# co = "!bash -c 'pause_guard' ; git checkout $* ; bash -c 'unpause_guard'"

# Autocomplete for my "git co"
function _git_co {
  _git_checkout $*
}

function pause_guard {
  ps ax | grep -w "bin/[g]uard" | awk '{print $1}' | xargs kill -USR1
}

function unpause_guard {
  ps ax | grep -w "bin/[g]uard" | awk '{print $1}' | xargs kill -USR2
}

function name_tab() {
  echo -ne "\033]0;$1\007"
}

function strip_diff_leading_symbols(){
  color_code_regex="(\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K])"

  # simplify the unified patch diff header
  gsed -r "s/^($color_code_regex)diff --git .*$//g" | \
    gsed -r "s/^($color_code_regex)index .*$/\n\1$(rule)/g" | \
    gsed -r "s/^($color_code_regex)\+\+\+(.*)$/\1+++\5\n\1$(rule)\x1B\[m/g" |\

    # actually strips the leading symbols
  gsed -r "s/^($color_code_regex)[\+\-]/\1 /g"
}

## Print a horizontal rule
rule () {
  printf "%$(tput cols)s\n"|tr " " "â”€"
}
